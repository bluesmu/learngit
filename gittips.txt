初始化Git仓库： git init

添加文件到Git仓库：
	1.git add <file> ,可反复使用添加多个文件
	2.git commit -m <"message">

随时掌握工作区状态： git status

查看文件修改内容： git diff <file>

版本之间变化： git reset --hard commit_id  (HEAD 指向当前版本， HEAD^指向前一个版本  HEAD~100 指向前100个版本)

查看版本提交历史： git log    （简化版：git log --pretty=oneline --abbrev-commit）

查看历史命令： git reflog

直接丢弃工作区修改(还原到版本区最新版本): git checkout -- file 

删除暂存区内容 :　git reset HEAD <file>

删除文件： git rm <file>

×××××××××××××××××××××××××××××××××××××××××××××××××××××××××××××××××××××××××××××××××××××××××××××
要关联一个远程库，使用命令 git remote add origin git@github.com:bluesmu/repo-name.git；

关联后，使用命令 git push -u origin master第一次推送master分支的所有内容；

此后，每次本地提交后，只要有必要，就可以使用命令git push origin master推送最新修改

从远程库克隆到本地 git clone git@github.com:bluesmu/gitskills.git
×××××××××××××××××××××××××××××××××××××××××××××××××××××××××××××××××××××××××××××××××××××××××××××

查看分支：git branch

创建分支：git branch <name>

切换分支：git checkout <name>

创建+切换分支：git checkout -b <name>

合并某分支到当前分支：git merge <name>    /   git merge --no-ff -m "comment" <name> 显示合并log

删除分支：git branch -d <name>

保存工作现场  git stash  

回到工作现场同时删除stash里的内容  git stash pop 

如果要丢弃一个没有被合并过的分支，可以通过git branch -D <name>强行删除

查看远程库信息，使用git remote -v；

本地新建的分支如果不推送到远程，对其他人就是不可见的；

从本地推送分支，使用git push origin branch-name，如果推送失败，先用git pull抓取远程的新提交；

在本地创建和远程分支对应的分支，使用git checkout -b branch-name origin/branch-name，本地和远程分支的名称最好一致；

建立本地分支和远程分支的关联，使用git branch --set-upstream branch-name origin/branch-name；

从远程抓取分支，使用git pull，如果有冲突，要先处理冲突

命令git tag <tagname>用于新建一个标签，默认为HEAD，也可以指定一个commit id；

命令git tag -a <tagname> -m "blablabla..."可以指定标签信息；

命令git tag可以查看所有标签

命令git push origin <tagname>可以推送一个本地标签；

命令git push origin --tags可以推送全部未推送过的本地标签；

命令git tag -d <tagname>可以删除一个本地标签；

命令git push origin :refs/tags/<tagname>可以删除一个远程标签   （先删除本地再执行此操作）

配置文件： 
	1.当前仓库 （仓库目录下）cat .git/config
	2.当前用户（用户主目录下）cat .gitconfig
	3.修改别名针对用户 git config --global alias.st status （针对当前仓库不用--global）
	
	
	
	
	
	
	
	
	
	
